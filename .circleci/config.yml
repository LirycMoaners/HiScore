version: 2

# List of jobs
jobs:
  pre_build:
    working_directory: ~/project
    docker:
      - image: circleci/node:12.13-browsers
    steps:
      # Checkout the code from the branch into the working_directory
      - checkout
      # Log the current branch
      - run:
          name: Show current branch
          command: echo ${CIRCLE_BRANCH}
      # Restore local dependencies from cache
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            - v1-dependencies-
      # Install project dependencies
      - run:
          name: Install local dependencies
          command: npm install
      # Cache local dependencies if they don't exist
      - save_cache:
          key: v1-dependencies-{{ checksum "package.json" }}
          paths:
            - node_modules
      # Lint the source code
      - run:
          name: Linting
          command: npm run lint
      # Cache local all project with dependencies
      - save_cache:
          key: v1-src-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - .

  # The angular build job for web
  build_web:
    working_directory: ~/project
    docker:
      - image: circleci/node:12.13-browsers
    steps:
      # Restore local dependencies from cache
      - restore_cache:
          key: v1-src-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_SHA1 }}
      # Build project with different configuration based on the current branch
      - run:
          name: Building
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
                npm run build:prod:web
            else
                npm run build
            fi
      # Cache the dist folder for the deploy job
      - save_cache:
          key: v1-web-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - dist

  # The angular build job for android
  build_android:
    working_directory: ~/project
    docker:
      - image: circleci/node:12.13-browsers
    steps:
      # Restore local dependencies from cache
      - restore_cache:
          key: v1-src-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_SHA1 }}
      # Build project with different configuration based on the current branch
      - run:
          name: Building
          command: npm run build:prod:android
      # Update dependencies & copy dist folder
      - run:
          name: Capacytor sync
          command: npx cap sync
      # Cache the dist folder for the deploy job
      - save_cache:
          key: v1-android-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - .

  # The angular build job for android
  build_electron:
    working_directory: ~/project
    docker:
      - image: circleci/node:12.13-browsers
    steps:
      # Restore local dependencies from cache
      - restore_cache:
          key: v1-src-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_SHA1 }}
      # Build project with different configuration based on the current branch
      - run:
          name: Building
          command: npm run build:prod:electron
      # Update dependencies & copy dist folder
      - run:
          name: Capacytor sync
          command: npx cap sync
      # Cache the dist folder for the deploy job
      - save_cache:
          key: v1-electron-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - .

  deploy_web:
    working_directory: ~/project
    docker:
      - image: circleci/node:12.13-browsers
    steps:
      # Log the current branch
      - run:
          name: Show current branch
          command: echo ${CIRCLE_BRANCH}
      # Restore cache from the build job which contains the
      # dist folder that needs to be deployed
      - restore_cache:
          key: v1-web-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Install LFTP
          command: |
            sudo apt-get update;
            sudo apt-get install lftp;
      - run:
          name: Send Via FTP
          command: lftp ftp://${username}:${password}@${hostname} -e "mirror -v -R ./dist/ /www/; quit"

  package_android:
    working_directory: ~/project/android
    docker:
      - image: circleci/android:api-28-alpha
    environment:
      JVM_OPTS: -Xmx3200m
    steps:
      # Restore local dependencies from cache
      - restore_cache:
          key: v1-android-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Chmod permissions #if permission for Gradlew Dependencies fail, use this.
          command: sudo chmod +x ./gradlew
      - run:
          name: Assemble debug apk
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              echo ${keystore} | base64 -d > keystore.jks
              ./gradlew assembleRelease
            else
              ./gradlew assembleDebug
            fi
      - store_artifacts:
          path: app/build/outputs/apk/
          destination: apks/
      - save_cache:
          paths:
            - ~/app/build/outputs/apk/
          key: apk-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}

  package_electron:
    working_directory: ~/project/electron
    docker:
      - image: circleci/node:12.13-browsers
    steps:
      # Restore local dependencies from cache
      - restore_cache:
          key: v1-electron-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_SHA1 }}
      # Install wine to build for windows
      - run:
          name: Install Wine
          command: sudo apt install wine
      # Install electron-packager dependencies
      - run:
          name: Install dependencies
          command: npm i
      # Package the windows exe with electron-packager
      - run:
          name: Package windows app
          command: npm run electron:package
      # Zip the all package folder
      - run:
          name: Zip exe & libs
          working_directory: ~/project/electron/release-builds/hi-score-win32-ia32
          command: zip -r hi-score-win32.zip .
      # Store the app for download
      - store_artifacts:
          path: release-builds/hi-score-win32-ia32/hi-score-win32.zip
          destination: hi-score-win32/

workflows:
  version: 2
  # The build and deploy workflow
  build_and_deploy:
    jobs:
      - pre_build
      - build_web:
          requires:
            - pre_build
      - build_android:
          requires:
            - pre_build
      - build_electron:
          requires:
            - pre_build
      - package_android:
          requires:
            - build_android
      - package_electron:
          requires:
            - build_electron
      # The deploy job will only run on the filtered branches and
      # require the build job to be successful before it starts
      - deploy_web:
          requires:
            - build_web
          filters:
            branches:
              only: master
